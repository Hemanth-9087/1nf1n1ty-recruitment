level4:
code used: 
.intel_syntax noprefix 
.global _start 

.section .text 
_start:
    mov rax, 41 
    mov rdi, 2
    mov rsi, 1
    syscall
    push rax

    sub rsp, 16 
    mov word ptr [rsp], 2 
    mov word ptr [rsp+2], 0x5000 
    mov dword ptr [rsp+4], 0 
    mov qword ptr [rsp+8], 8 
    mov rsi, rsp 
    mov rdx, 16 
    mov rdi, rax 
    mov rax, 49 
    syscall 
    add rsp, 16

    mov rdi, [rsp]
    add rsp, 8
    mov rsi, 0
    mov rax, 0x32
    syscall 

    mov rax, 60 
    mov rdi, 0 
    syscall 
.section .data

Explanation: Write the above assembly code by referring to the documentations for general syntax for the listen call, and to manipulate the register values refer https://x64.syscall.sh/. 

Flag: `pwn.college{UGLFlqvZbc1gywcUgzixtJqIdae.dNDNzMDL1kTM2czW}`



level5:
code used: 
.intel_syntax noprefix 
.global _start 

.section .text 
_start:
    mov rax, 41 
    mov rdi, 2
    mov rsi, 1
    syscall
    push rax

    sub rsp, 16 
    mov word ptr [rsp], 2 
    mov word ptr [rsp+2], 0x5000 
    mov dword ptr [rsp+4], 0 
    mov qword ptr [rsp+8], 8 
    mov rsi, rsp 
    mov rdx, 16 
    mov rdi, rax 
    mov rax, 49 
    syscall 
    add rsp, 16

    mov rdi, [rsp]
    add rsp, 8
    mov rsi, 0
    mov rax, 0x32
    syscall 

    mov rax, 60 
    mov rdi, 0 
    syscall 
.section .data

Explanation: Write the above assembly code by referring to the documentations for general syntax for the listen call, and to manipulate the register values refer https://x64.syscall.sh/. 

Flag: `pwn.college{UGLFlqvZbc1gywcUgzixtJqIdae.dNDNzMDL1kTM2czW}`


